#!/usr/bin/env sh
set -eu

log() {
  printf "%s | %s\n" "$(date -Iseconds)" "$*"
}

# Defaults
PORT="${PORT:-8080}"
HTTPS_PORT="${HTTPS_PORT:-8443}"
PASSWORD_ENV="${PASSWORD:-}"

# Ensure dirs
mkdir -p /data /workspace /srv
chown -R 10001:10001 /data /workspace /srv || true

# Password handling
PASS_FILE="/data/.code-server-password"
if [ -n "$PASSWORD_ENV" ]; then
  PASSWORD_VALUE="$PASSWORD_ENV"
  log "Using PASSWORD from environment."
else
  if [ -f "$PASS_FILE" ]; then
    PASSWORD_VALUE="$(cat "$PASS_FILE")"
    log "Loaded PASSWORD from $PASS_FILE."
  else
    # Generate a random 32-char token
    if command -v openssl >/dev/null 2>&1; then
      PASSWORD_VALUE="$(openssl rand -hex 16)"
    else
      # Fallback using /dev/urandom
      PASSWORD_VALUE="$(head -c 24 /dev/urandom | base64 | tr -dc 'A-Za-z0-9' | head -c 32)"
    fi
    printf "%s" "$PASSWORD_VALUE" > "$PASS_FILE"
    chmod 600 "$PASS_FILE"
    log "Generated new PASSWORD and stored at $PASS_FILE."
  log "Autogenerated PASSWORD: $PASSWORD_VALUE"
  fi
fi

# Render health file
START_TS="$(date -Iseconds)"
cat > /srv/healthz.txt <<EOF
ok
EOF

# Landing page
if [ ! -f /srv/index.html ]; then
  cat > /srv/index.html <<HTML
<!doctype html>
<html>
<head>
  <meta charset="utf-8" />
  <meta name="viewport" content="width=device-width, initial-scale=1" />
  <title>GuildNet Agent</title>
  <style>
    body { font-family: system-ui, -apple-system, Segoe UI, Roboto, sans-serif; margin: 2rem; color: #222; }
    .card { border: 1px solid #ddd; border-radius: 8px; padding: 1rem; max-width: 720px; }
    a { color: #0b5fff; text-decoration: none; }
    a:hover { text-decoration: underline; }
    .muted { color: #666; font-size: 0.9rem; }
  </style>
</head>
<body>
  <div class="card">
    <h1>GuildNet Agent</h1>
    <p class="muted">Start: ${START_TS}</p>
    <ul>
      <li><a href="/">Open VS Code (code-server)</a></li>
      <li><a href="/healthz">Health</a></li>
    </ul>
    <p class="muted">Default port: ${PORT}</p>
  </div>
</body>
</html>
HTML
fi

# Start code-server (listen on loopback only), workspace at /workspace
CODE_SERVER_ADDR="127.0.0.1:8080"

log "Starting code-server on ${CODE_SERVER_ADDR}, proxy ports http:${PORT} https:${HTTPS_PORT}, workspace /workspace"

CODE_SERVER_CMD="code-server --bind-addr ${CODE_SERVER_ADDR} \
  --user-data-dir /data/user-data \
  --extensions-dir /data/extensions \
  --disable-telemetry \
  --auth password /workspace"

# Export PASSWORD for code-server
export PASSWORD="$PASSWORD_VALUE"

# Trap and forward signals
PIDS=""
term() {
  log "Shutting down..."
  # shellcheck disable=2086
  [ -n "$PIDS" ] && kill $PIDS 2>/dev/null || true
}
trap term INT TERM

# Start code-server
sh -c "$CODE_SERVER_CMD" &
PID_CODE=$!
PIDS="$PIDS $PID_CODE"

# Prepare Caddyfile with env PORT expansion (Caddy supports {$PORT})
CADDYFILE="/opt/agent/Caddyfile"

# Start Caddy serving /healthz and reverse proxy to code-server
caddy run --config "$CADDYFILE" --adapter caddyfile &
PID_CADDY=$!
PIDS="$PIDS $PID_CADDY"

# Wait on children; if either exits, exit
# POSIX-friendly loop: exit when any child dies
STATUS=0
while :; do
  if ! kill -0 "$PID_CODE" 2>/dev/null; then
    STATUS=1
    break
  fi
  if ! kill -0 "$PID_CADDY" 2>/dev/null; then
    STATUS=1
    break
  fi
  sleep 1
done
term
wait || true
exit $STATUS
